/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: '.*GERMLINECNVCALLER_COHORT.*' {
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*GERMLINECNVCALLER_COHORT:SAMTOOLS_FAIDX' {
        ext.when = { params.fai.equals(null) }
        publishDir = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/germlinecnvcaller/references" },
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*GERMLINECNVCALLER_COHORT:PICARD_CREATESEQUENCEDICTIONARY' {
        ext.when = { params.dict.equals(null) }
        publishDir = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/germlinecnvcaller/references" },
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*GERMLINECNVCALLER_COHORT:GATK4_PREPROCESSINTERVALS' {
        ext.args = { ["--imr OVERLAPPING_ONLY",
                        "--padding ${params.padding}",
                        "--bin-length ${params.bin_length}"].join(" ")
                    }
    }

    withName: '.*GERMLINECNVCALLER_COHORT:GATK4_COLLECTREADCOUNTS' {
        ext.args = {"--format ${params.readcount_format} --imr OVERLAPPING_ONLY"}
        publishDir = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/germlinecnvcaller/readcounts" },
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*GERMLINECNVCALLER_COHORT:GATK4_ANNOTATEINTERVALS' {
        ext.args = {"--imr OVERLAPPING_ONLY"}
        ext.prefix = {" ${meta.id}_annotated"}
    }

    withName: '.*GERMLINECNVCALLER_COHORT:GATK4_FILTERINTERVALS' {
        ext.args   = {"--imr OVERLAPPING_ONLY"}
        ext.prefix = {" ${meta.id}_filtered"}
    }

    withName: '.*GERMLINECNVCALLER_COHORT:GATK4_INTERVALLISTTOOLS' {
        ext.args   = {"--SUBDIVISION_MODE INTERVAL_COUNT --SCATTER_CONTENT ${params.scatter_content}"}
    }

    withName: '.*GERMLINECNVCALLER_COHORT:GATK4_DETERMINEGERMLINECONTIGPLOIDY' {
        ext.args   = {"--imr OVERLAPPING_ONLY"}
        publishDir = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/germlinecnvcaller/determinegermlinecontigploidy" },
                pattern: "*-model",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*GERMLINECNVCALLER_COHORT:GATK4_GERMLINECNVCALLER' {
        ext.args   = {"--imr OVERLAPPING_ONLY --run-mode COHORT"}
        publishDir = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/germlinecnvcaller/germlinecnvcaller" },
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
