nextflow_workflow {

    name "Test Workflow GERMLINECNVCALLER_COHORT"
    script "subworkflows/local/germlinecnvcaller_cohort.nf"
    workflow "GERMLINECNVCALLER_COHORT"
    tag "germlinecnvcaller"
    config "tests/pipeline/germlinecnvcaller_cohort.config"

    test("Run germlinecnvcaller test") {

        when {
            params {
                outdir               = "$outputDir"
                tools                = 'germlinecnvcaller'
                fasta                = "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/genome/genome.fasta"
                fai                  = null
                dict                 = null
                gcnv_scatter_content = 2
                gcnv_model_name      = 'cohort'
                gcnv_ploidy_priors   = "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/gatk/contig_ploidy_priors_table.tsv"
            }
            workflow {
                """
                input[0]  = Channel.empty()
                input[1]  = Channel.empty()
                input[2]  = Channel.fromPath(params.fasta).map { fasta -> [[id:fasta.baseName],fasta]}.collect()
                input[3]  = Channel.of(
                                [[ id:'test' ], file("https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam"),[]],
                                [[ id:'test2' ], file("https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam"),[]])
                input[4]  = Channel.fromPath(params.gcnv_ploidy_priors)
                input[5]  = Channel.value([[:],[]])
                input[6]  = Channel.value([[:],[]])
                input[7]  = Channel.value([[:],[]])
                input[8]  = Channel.value([[:],[]])
                input[9]  = Channel.value([[:],[]])
                input[10] = Channel.value([[:],[]])
                input[11] = params.gcnv_model_name
                """
            }
        }

        then {
                assert workflow.success
                assert workflow.trace.succeeded().size() == 13
                assert workflow.trace.failed().size() == 0

                assert path("$outputDir/germlinecnvcaller/references/genome.dict").toFile().isFile()
                assert path("$outputDir/germlinecnvcaller/germlinecnvcaller/1scattered-cnv-model").toFile().isDirectory()
                assert path("$outputDir/germlinecnvcaller/determinegermlinecontigploidy/cohort-model").toFile().isDirectory()


                def expected      = path("$baseDir/tests/test_assets/germlinecnvcaller_software_versions.yaml").yaml.collect()
                def observed_list = []
                def observed      = workflow.out.versions.collect {f -> path(f).yaml.entrySet()}
                observed.stream()
                    .forEach(observed_list::addAll)

                assertContainsInAnyOrder(expected, observed_list)

        }

    }

}
